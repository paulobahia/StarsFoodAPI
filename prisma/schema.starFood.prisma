datasource db {
  provider = "mysql"
  url      = env("DATABASE_STAR_FOOD_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated/StarFood"
}

model Restaurants {
  Id            Int             @id @default(autoincrement())
  Name          String
  RestaurantId  Int             @unique
  Active        Boolean         @default(true)
  CreatedAt     DateTime        @default(now())
  UpdatedAt     DateTime        @updatedAt
  DeletedAt     DateTime?
  Categories    Categories[]
  Order         Order[]
  ProductImages ProductImages[]
  Products      Products[]
  Table         Table[]
  Variations    Variations[]
}

model Products {
  Id            Int             @id @default(autoincrement())
  Name          String
  Description   String
  ImgUrl        Json
  CreatedAt     DateTime        @default(now())
  UpdatedAt     DateTime        @updatedAt
  DeletedAt     DateTime?
  RestaurantId  Int
  CategoryId    Int
  Status        Boolean         @default(false)
  Active        Boolean         @default(true)
  ProductImages ProductImages[]
  Categories    Categories      @relation(fields: [CategoryId], references: [Id])
  Restaurant    Restaurants     @relation(fields: [RestaurantId], references: [Id])
  Variations    Variations[]

  @@index([CategoryId], map: "Products_CategoryId_fkey")
  @@index([RestaurantId], map: "Products_RestaurantId_fkey")
}

model Variations {
  Id           Int            @id @default(autoincrement())
  Name         String
  Value        String
  CreatedAt    DateTime       @default(now())
  UpdatedAt    DateTime       @updatedAt
  DeletedAt    DateTime?
  ProductId    Int
  RestaurantId Int
  Active       Boolean        @default(true)
  OrderProduct ProductOrder[]
  Products     Products       @relation(fields: [ProductId], references: [Id])
  Restaurant   Restaurants    @relation(fields: [RestaurantId], references: [Id])

  @@index([ProductId], map: "Variations_ProductId_fkey")
  @@index([RestaurantId], map: "Variations_RestaurantId_fkey")
}

model Categories {
  Id           Int         @id @default(autoincrement())
  Name         String
  CreatedAt    DateTime    @default(now())
  UpdatedAt    DateTime    @updatedAt
  DeletedAt    DateTime?
  RestaurantId Int
  Status       Boolean     @default(false)
  Active       Boolean     @default(true)
  Restaurant   Restaurants @relation(fields: [RestaurantId], references: [Id])
  Products     Products[]

  @@index([RestaurantId], map: "Categories_RestaurantId_fkey")
}

model Order {
  Id            Int            @id @default(autoincrement())
  Status        Status         @default(WAITING)
  CreatedAt     DateTime       @default(now())
  UpdatedAt     DateTime       @updatedAt
  DeletedAt     DateTime?
  Paid          Boolean        @default(false)
  Active        Boolean        @default(true)
  UserId        Int
  TableId       Int
  RestaurantId  Int
  Restaurant    Restaurants    @relation(fields: [RestaurantId], references: [Id])
  Table         Table          @relation(fields: [TableId], references: [Id])
  Payments      Payments[]
  OrderProducts ProductOrder[]

  @@index([RestaurantId], map: "Order_RestaurantId_fkey")
  @@index([TableId], map: "Order_TableId_fkey")
}

model ProductOrder {
  Id          Int        @id @default(autoincrement())
  Quantity    Int
  OrderId     Int
  CreatedAt   DateTime   @default(now())
  UpdatedAt   DateTime   @updatedAt
  VariationId Int
  Order       Order      @relation(fields: [OrderId], references: [Id])
  Variation   Variations @relation(fields: [VariationId], references: [Id])

  @@index([OrderId], map: "ProductOrder_OrderId_fkey")
  @@index([VariationId], map: "ProductOrder_VariationId_fkey")
}

model ProductImages {
  Id           Int         @id @default(autoincrement())
  Name         String
  ImagePath    String
  Size         Int
  RestaurantId Int
  CreatedAt    DateTime    @default(now())
  UpdatedAt    DateTime    @updatedAt
  DeletedAt    DateTime?
  Active       Boolean     @default(true)
  Restaurant   Restaurants @relation(fields: [RestaurantId], references: [Id])
  Products     Products?   @relation(fields: [productsId], references: [Id])
  productsId   Int?

  @@index([RestaurantId], map: "ProductImages_RestaurantId_fkey")
}

model Table {
  Id           Int         @id @default(autoincrement())
  Status       Boolean     @default(false)
  Number       Int
  Barcode      String
  CreatedAt    DateTime    @default(now())
  UpdatedAt    DateTime    @updatedAt
  DeletedAt    DateTime?
  Active       Boolean     @default(true)
  RestaurantId Int
  Order        Order[]
  Restaurant   Restaurants @relation(fields: [RestaurantId], references: [Id])

  @@index([RestaurantId], map: "Table_RestaurantId_fkey")
}

model Payments {
  Id          Int      @id @default(autoincrement())
  OrderId     Int
  Amount      Int
  PaymentType String
  CreatedAt   DateTime @default(now())
  UpdatedAt   DateTime @updatedAt
  Order       Order    @relation(fields: [OrderId], references: [Id])

  @@index([OrderId], map: "Payments_OrderId_fkey")
}

enum Status {
  WAITING
  IN_PRODUCTION
  DONE
  COMPLETED
  PAID_OUT
}
